name: CICD

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - uses: ./ci_utils
        with:
          only_setup: "true"
      - name: Lint Python Code
        run: |
          ./do.sh pylint
      - name: Lint Go Code
        run: |
          ./do.sh golint

  dp_ci:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Setup docker
        uses: docker-practice/actions-setup-docker@master
      - name: Deploy back-to-back DP-only distribution of ixia-c
        run: |
          ./do.sh topo new dp
      - uses: ./ci_utils
        with:
          test_suite: "dp_feature"
      - name: Get container logs
        if: always()
        run: |
          ./do.sh topo logs
      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: dp_logs
          path: |
            logs
      - name: Teardown back-to-back DP-only distribution of ixia-c
        run: |
          ./do.sh topo rm dp

  cpdp_ci:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Setup docker
        uses: docker-practice/actions-setup-docker@master
      - name: Deploy back-to-back CP/DP distribution of ixia-c
        run: |
          GITHUB_USER=${{ secrets.ENV_GITHUB_USER }} GITHUB_PAT=${{ secrets.ENV_GITHUB_PAT }} ./do.sh topo new cpdp
      - uses: ./ci_utils
        with:
          test_suite: "dp_feature"
      - name: Get container logs
        if: always()
        run: |
          ./do.sh topo logs cpdp
      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cpdp_logs
          path: |
            logs
      - name: Teardown back-to-back CP/DP distribution of ixia-c
        run: |
          ./do.sh topo rm cpdp

  cpdp_ipv6_ci:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Setup docker
        uses: docker-practice/actions-setup-docker@master
      - name: Deploy back-to-back CP/DP distribution of ixia-c
        run: |
          GITHUB_USER=${{ secrets.ENV_GITHUB_USER }} GITHUB_PAT=${{ secrets.ENV_GITHUB_PAT }} ./do.sh topo new cpdp ipv6
      - uses: ./ci_utils
        with:
          test_suite: "dp_feature"
      - name: Get container logs
        if: always()
        run: |
          ./do.sh topo logs cpdp
      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cpdp_ipv6_logs
          path: |
            logs
      - name: Teardown back-to-back CP/DP distribution of ixia-c
        run: |
          ./do.sh topo rm cpdp

  kne_b2b_ci:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Setup docker
        uses: docker-practice/actions-setup-docker@master
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.18"
      - name: Setup KNE cluster
        run: |
          GITHUB_USER=${{ secrets.ENV_GITHUB_USER }} GITHUB_PAT=${{ secrets.ENV_GITHUB_PAT }} ./do.sh new_k8s_cluster kne
      - name: Deploy KNE OTG back-to-back topology
        run: |
          GITHUB_USER=${{ secrets.ENV_GITHUB_USER }} GITHUB_PAT=${{ secrets.ENV_GITHUB_PAT }} ./do.sh topo new kneb2b
      - uses: ./ci_utils
        with:
          test_suite: "dp_feature"
      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kne_b2b_logs
          path: |
            logs
      - name: Teardown KNE OTG back-to-back topology
        run: |
          ./do.sh topo rm kneb2b

  kne_b2b_eth0_ci:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Setup docker
        uses: docker-practice/actions-setup-docker@master
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.18"
      - name: Setup K8S cluster
        run: |
          GITHUB_USER=${{ secrets.ENV_GITHUB_USER }} GITHUB_PAT=${{ secrets.ENV_GITHUB_PAT }} ./do.sh new_k8s_cluster
      - name: Deploy OTG back-to-back topology with eth0
        run: |
          GITHUB_USER=${{ secrets.ENV_GITHUB_USER }} GITHUB_PAT=${{ secrets.ENV_GITHUB_PAT }} ./do.sh topo new k8seth0
      - name: Run go tests
        run: |
          ./do.sh pregotest
          go mod tidy
          ./do.sh gotest -tags="all" -run="^TestUdpHeaderEth0$"
      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kne_b2b_eth0_logs
          path: |
            logs
      - name: Teardown OTG back-to-back topology with eth0
        run: |
          ./do.sh topo rm k8seth0

  lag_ci:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Setup docker
        uses: docker-practice/actions-setup-docker@master
      - name: Deploy back-to-back LAG CP/DP distribution of ixia-c
        run: |
          GITHUB_USER=${{ secrets.ENV_GITHUB_USER }} GITHUB_PAT=${{ secrets.ENV_GITHUB_PAT }} ./do.sh topo new lag
      - uses: ./ci_utils
        with:
          test_suite: "dp_feature"
          execute_python_tests: "false"
      - name: Get container logs
        if: always()
        run: |
          ./do.sh topo logs cpdp
      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: lag_logs
          path: |
            logs
      - name: Teardown back-to-back LAG CP/DP distribution of ixia-c
        run: |
          ./do.sh topo rm lag

  perf_ci:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Setup docker
        uses: docker-practice/actions-setup-docker@master
      - name: Deploy back-to-back CP/DP distribution of ixia-c
        run: |
          GITHUB_USER=${{ secrets.ENV_GITHUB_USER }} GITHUB_PAT=${{ secrets.ENV_GITHUB_PAT }} ./do.sh topo new cpdp
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.18"
      - name: Run go tests (HTTP)
        run: |
          ./do.sh pregotest
          go mod tidy
          OTG_ITERATIONS=1 ./do.sh gotest -tags=perf
      - name: Run go tests (gRPC)
        run: |
          ./do.sh pregotest
          OTG_ITERATIONS=2 OTG_GRPC_TRANSPORT=true OTG_HOST="localhost:40051" ./do.sh gotest -tags=perf
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Run python tests
        run: |
          ./do.sh prepytest
          ./do.sh pylint
          OTG_ITERATIONS=2 ./do.sh pytest -m perf
      - name: Get container logs
        if: always()
        run: |
          ./do.sh topo logs cpdp
      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: perf_ci_logs
          path: |
            logs
      - name: Teardown back-to-back CP/DP distribution of ixia-c
        run: |
          ./do.sh topo rm cpdp

  codeQl:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["go", "python"]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #   echo "Run, Build Application using script"
      #   ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
